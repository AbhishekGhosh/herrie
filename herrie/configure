#!/bin/sh
# 
# Copyright (c) 2006-2007 Ed Schouten <ed@fxq.nl>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 

APP_NAME=herrie
APP_VERSION=1.3

# Default compilation switches
CFG_AO=oss
CFG_HTTP=yes
CFG_MP3=yes
CFG_SCROBBLER=yes
CFG_SNDFILE=yes
CFG_TRANS=nl
CFG_VORBIS=yes

# Operating system defaults
OS=`uname`
case $OS in
Darwin)
	CFG_AO=ao
	CFLAGS="$CFLAGS -DBUILD_GUI_SIGWINCH_WRAPPER"
	LDFLAGS="$LDFLAGS -lresolv"
	[ "$PREFIX" = "" ] && PREFIX=/opt/local
	MANDIR=$PREFIX/share/man
	;;
FreeBSD)
	[ "$PREFIX" = "" ] && PREFIX=/usr/local
	MANDIR=$PREFIX/man
	;;
*)
	echo "Error: Unknown operating system."
	exit 1
esac
TRANSDIR=$PREFIX/share/locale

# Command line options
while [ $# -gt 0 ]
do
	case $1 in
	no_http)
		unset CFG_HTTP
		;;
	no_mp3)
		unset CFG_MP3
		;;
	no_scrobbler)
		unset CFG_SCROBBLER
		;;
	no_sndfile)
		unset CFG_SNDFILE
		;;
	no_trans)
		unset CFG_TRANS
		;;
	no_vorbis)
		unset CFG_VORBIS
		;;
	esac

	shift
done

# Standard options
CFLAGS="$CFLAGS `pkg-config --cflags glib-2.0 gthread-2.0` \
    -DAPP_NAME=\\\"$APP_NAME\\\" -DAPP_VERSION=\\\"$APP_VERSION\\\" \
    -DAUDIO_OUTPUT=\\\"$CFG_AO\\\" -I$PREFIX/include \
    -include src/stdinc.h"
LDFLAGS="$LDFLAGS `pkg-config --libs glib-2.0 gthread-2.0` \
    -L$PREFIX/lib -lcurses"
SRCS="audio_file audio_output_$CFG_AO config gui_browser gui_draw \
    gui_input gui_msgbar gui_playq gui_vfslist main playq vfs \
    vfs_playlist vfs_regular"

# HTTP and Scrobbler code need cURL
if [ "$CFG_HTTP" != "" -o "$CFG_SCROBBLER" != "" ]
then
	if [ "$CFG_HTTP" != "" ]
	then
		CFLAGS="$CFLAGS -DBUILD_HTTP"
		SRCS="$SRCS vfs_http"
	fi
	if [ "$CFG_SCROBBLER" != "" ]
	then
		CFLAGS="$CFLAGS -DBUILD_SCROBBLER"
		SRCS="$SRCS scrobbler scrobbler_hash scrobbler_send"
	fi
	CFLAGS="$CFLAGS `curl-config --cflags`"
	LDFLAGS="$LDFLAGS `curl-config --libs`"
fi
# MP3 support
if [ "$CFG_MP3" != "" ]
then
	CFLAGS="$CFLAGS -DBUILD_MP3"
	LDFLAGS="$LDFLAGS -lmad -lid3tag"
	SRCS="$SRCS audio_format_mp3"
fi
# libsndfile support
if [ "$CFG_SNDFILE" != "" ]
then
	CFLAGS="$CFLAGS -DBUILD_SNDFILE"
	LDFLAGS="$LDFLAGS -lsndfile"
	SRCS="$SRCS audio_format_sndfile"
fi
# Ogg Vorbis support
if [ "$CFG_VORBIS" != "" ]
then
	CFLAGS="$CFLAGS -DBUILD_VORBIS"
	LDFLAGS="$LDFLAGS -lvorbisfile -lvorbis -logg"
	SRCS="$SRCS audio_format_vorbis"
fi

# Audio output options
case $CFG_AO in
ao)
	CFLAGS="$CFLAGS -DCLOSE_STDERR"
	LDFLAGS="$LDFLAGS -lao"
	;;
oss)
	case $OS in
	NetBSD|OpenBSD)
		LDFLAGS="$LDFLAGS -lossaudio"
		;;
	esac
	;;
sdl)
	CFLAGS="$CFLAGS `sdl-config --cflags`"
	LDFLAGS="$LDFLAGS `sdl-config --libs`"
	;;
esac

OBJS=""
for i in $SRCS
do
	OBJS="$OBJS $i.o"
done
LINGUAS=""
for i in $CFG_TRANS
do
	LINGUAS="$LINGUAS $i.mo"
done
cat > Makefile << EOF
CFLAGS=$CFLAGS
LDFLAGS=$LDFLAGS
OBJS=$OBJS
all: $APP_NAME $APP_NAME.1.gz $LINGUAS
clean:
	rm -f *.core *.o .gdb_history
distclean: clean
	rm -f $APP_NAME $APP_NAME.1.gz *.mo Makefile
install: $APP_NAME $APP_NAME.1.gz $LINGUAS
	install -s $APP_NAME $PREFIX/bin/
	install -m 444 $APP_NAME.1.gz $MANDIR/man1/
EOF
for i in $CFG_TRANS
do
	echo "	mkdir $TRANSDIR/$i/LC_MESSAGES" >> Makefile
	echo "	install -m 444 $i.mo $TRANSDIR/$i/LC_MESSAGES/$APP_NAME.mo" >> Makefile
done
cat >> Makefile << EOF
$APP_NAME: \$(OBJS)
	\$(CC) \$(OBJS) \$(LDFLAGS) -o $APP_NAME
$APP_NAME.1.gz: $APP_NAME.1
	gzip -9 < $APP_NAME.1 > $APP_NAME.1.gz
EOF
for i in $SRCS
do
	echo "$i.o: src/$i.c" >> Makefile
	echo "	\$(CC) -c src/$i.c \$(CFLAGS) -o $i.o" >> Makefile
done
for i in $CFG_TRANS
do
	echo "$i.mo: lang/$i.po" >> Makefile
	echo "	msgfmt -o $i.mo lang/$i.po" >> Makefile
done
